"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SessionTokenCache = void 0;
var _node = _interopRequireDefault(require("parse/node"));
var _lruCache = _interopRequireDefault(require("lru-cache"));
var _logger = _interopRequireDefault(require("../logger"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function userForSessionToken(sessionToken) {
  var q = new _node.default.Query('_Session');
  q.equalTo('sessionToken', sessionToken);
  return q.first({
    useMasterKey: true
  }).then(function (session) {
    if (!session) {
      return Promise.reject('No session found for session token');
    }
    return session.get('user');
  });
}
class SessionTokenCache {
  constructor(timeout = 30 * 24 * 60 * 60 * 1000, maxSize = 10000) {
    this.cache = new _lruCache.default({
      max: maxSize,
      ttl: timeout
    });
  }
  getUserId(sessionToken) {
    if (!sessionToken) {
      return Promise.reject('Empty sessionToken');
    }
    const userId = this.cache.get(sessionToken);
    if (userId) {
      _logger.default.verbose('Fetch userId %s of sessionToken %s from Cache', userId, sessionToken);
      return Promise.resolve(userId);
    }
    return userForSessionToken(sessionToken).then(user => {
      _logger.default.verbose('Fetch userId %s of sessionToken %s from Parse', user.id, sessionToken);
      const userId = user.id;
      this.cache.set(sessionToken, userId);
      return Promise.resolve(userId);
    }, error => {
      _logger.default.error('Can not fetch userId for sessionToken %j, error %j', sessionToken, error);
      return Promise.reject(error);
    });
  }
}
exports.SessionTokenCache = SessionTokenCache;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbm9kZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2xydUNhY2hlIiwiX2xvZ2dlciIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwidXNlckZvclNlc3Npb25Ub2tlbiIsInNlc3Npb25Ub2tlbiIsInEiLCJQYXJzZSIsIlF1ZXJ5IiwiZXF1YWxUbyIsImZpcnN0IiwidXNlTWFzdGVyS2V5IiwidGhlbiIsInNlc3Npb24iLCJQcm9taXNlIiwicmVqZWN0IiwiZ2V0IiwiU2Vzc2lvblRva2VuQ2FjaGUiLCJjb25zdHJ1Y3RvciIsInRpbWVvdXQiLCJtYXhTaXplIiwiY2FjaGUiLCJMUlUiLCJtYXgiLCJ0dGwiLCJnZXRVc2VySWQiLCJ1c2VySWQiLCJsb2dnZXIiLCJ2ZXJib3NlIiwicmVzb2x2ZSIsInVzZXIiLCJpZCIsInNldCIsImVycm9yIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9MaXZlUXVlcnkvU2Vzc2lvblRva2VuQ2FjaGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFBhcnNlIGZyb20gJ3BhcnNlL25vZGUnO1xuaW1wb3J0IExSVSBmcm9tICdscnUtY2FjaGUnO1xuaW1wb3J0IGxvZ2dlciBmcm9tICcuLi9sb2dnZXInO1xuXG5mdW5jdGlvbiB1c2VyRm9yU2Vzc2lvblRva2VuKHNlc3Npb25Ub2tlbikge1xuICB2YXIgcSA9IG5ldyBQYXJzZS5RdWVyeSgnX1Nlc3Npb24nKTtcbiAgcS5lcXVhbFRvKCdzZXNzaW9uVG9rZW4nLCBzZXNzaW9uVG9rZW4pO1xuICByZXR1cm4gcS5maXJzdCh7IHVzZU1hc3RlcktleTogdHJ1ZSB9KS50aGVuKGZ1bmN0aW9uIChzZXNzaW9uKSB7XG4gICAgaWYgKCFzZXNzaW9uKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoJ05vIHNlc3Npb24gZm91bmQgZm9yIHNlc3Npb24gdG9rZW4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHNlc3Npb24uZ2V0KCd1c2VyJyk7XG4gIH0pO1xufVxuXG5jbGFzcyBTZXNzaW9uVG9rZW5DYWNoZSB7XG4gIGNhY2hlOiBPYmplY3Q7XG5cbiAgY29uc3RydWN0b3IodGltZW91dDogbnVtYmVyID0gMzAgKiAyNCAqIDYwICogNjAgKiAxMDAwLCBtYXhTaXplOiBudW1iZXIgPSAxMDAwMCkge1xuICAgIHRoaXMuY2FjaGUgPSBuZXcgTFJVKHtcbiAgICAgIG1heDogbWF4U2l6ZSxcbiAgICAgIHR0bDogdGltZW91dCxcbiAgICB9KTtcbiAgfVxuXG4gIGdldFVzZXJJZChzZXNzaW9uVG9rZW46IHN0cmluZyk6IGFueSB7XG4gICAgaWYgKCFzZXNzaW9uVG9rZW4pIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgnRW1wdHkgc2Vzc2lvblRva2VuJyk7XG4gICAgfVxuICAgIGNvbnN0IHVzZXJJZCA9IHRoaXMuY2FjaGUuZ2V0KHNlc3Npb25Ub2tlbik7XG4gICAgaWYgKHVzZXJJZCkge1xuICAgICAgbG9nZ2VyLnZlcmJvc2UoJ0ZldGNoIHVzZXJJZCAlcyBvZiBzZXNzaW9uVG9rZW4gJXMgZnJvbSBDYWNoZScsIHVzZXJJZCwgc2Vzc2lvblRva2VuKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodXNlcklkKTtcbiAgICB9XG4gICAgcmV0dXJuIHVzZXJGb3JTZXNzaW9uVG9rZW4oc2Vzc2lvblRva2VuKS50aGVuKFxuICAgICAgdXNlciA9PiB7XG4gICAgICAgIGxvZ2dlci52ZXJib3NlKCdGZXRjaCB1c2VySWQgJXMgb2Ygc2Vzc2lvblRva2VuICVzIGZyb20gUGFyc2UnLCB1c2VyLmlkLCBzZXNzaW9uVG9rZW4pO1xuICAgICAgICBjb25zdCB1c2VySWQgPSB1c2VyLmlkO1xuICAgICAgICB0aGlzLmNhY2hlLnNldChzZXNzaW9uVG9rZW4sIHVzZXJJZCk7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodXNlcklkKTtcbiAgICAgIH0sXG4gICAgICBlcnJvciA9PiB7XG4gICAgICAgIGxvZ2dlci5lcnJvcignQ2FuIG5vdCBmZXRjaCB1c2VySWQgZm9yIHNlc3Npb25Ub2tlbiAlaiwgZXJyb3IgJWonLCBzZXNzaW9uVG9rZW4sIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICAgIH1cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCB7IFNlc3Npb25Ub2tlbkNhY2hlIH07XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLEtBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFNBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLE9BQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUErQixTQUFBRCx1QkFBQUksR0FBQSxXQUFBQSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxHQUFBRCxHQUFBLEtBQUFFLE9BQUEsRUFBQUYsR0FBQTtBQUUvQixTQUFTRyxtQkFBbUJBLENBQUNDLFlBQVksRUFBRTtFQUN6QyxJQUFJQyxDQUFDLEdBQUcsSUFBSUMsYUFBSyxDQUFDQyxLQUFLLENBQUMsVUFBVSxDQUFDO0VBQ25DRixDQUFDLENBQUNHLE9BQU8sQ0FBQyxjQUFjLEVBQUVKLFlBQVksQ0FBQztFQUN2QyxPQUFPQyxDQUFDLENBQUNJLEtBQUssQ0FBQztJQUFFQyxZQUFZLEVBQUU7RUFBSyxDQUFDLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLFVBQVVDLE9BQU8sRUFBRTtJQUM3RCxJQUFJLENBQUNBLE9BQU8sRUFBRTtNQUNaLE9BQU9DLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDLG9DQUFvQyxDQUFDO0lBQzdEO0lBQ0EsT0FBT0YsT0FBTyxDQUFDRyxHQUFHLENBQUMsTUFBTSxDQUFDO0VBQzVCLENBQUMsQ0FBQztBQUNKO0FBRUEsTUFBTUMsaUJBQWlCLENBQUM7RUFHdEJDLFdBQVdBLENBQUNDLE9BQWUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxFQUFFQyxPQUFlLEdBQUcsS0FBSyxFQUFFO0lBQy9FLElBQUksQ0FBQ0MsS0FBSyxHQUFHLElBQUlDLGlCQUFHLENBQUM7TUFDbkJDLEdBQUcsRUFBRUgsT0FBTztNQUNaSSxHQUFHLEVBQUVMO0lBQ1AsQ0FBQyxDQUFDO0VBQ0o7RUFFQU0sU0FBU0EsQ0FBQ3BCLFlBQW9CLEVBQU87SUFDbkMsSUFBSSxDQUFDQSxZQUFZLEVBQUU7TUFDakIsT0FBT1MsT0FBTyxDQUFDQyxNQUFNLENBQUMsb0JBQW9CLENBQUM7SUFDN0M7SUFDQSxNQUFNVyxNQUFNLEdBQUcsSUFBSSxDQUFDTCxLQUFLLENBQUNMLEdBQUcsQ0FBQ1gsWUFBWSxDQUFDO0lBQzNDLElBQUlxQixNQUFNLEVBQUU7TUFDVkMsZUFBTSxDQUFDQyxPQUFPLENBQUMsK0NBQStDLEVBQUVGLE1BQU0sRUFBRXJCLFlBQVksQ0FBQztNQUNyRixPQUFPUyxPQUFPLENBQUNlLE9BQU8sQ0FBQ0gsTUFBTSxDQUFDO0lBQ2hDO0lBQ0EsT0FBT3RCLG1CQUFtQixDQUFDQyxZQUFZLENBQUMsQ0FBQ08sSUFBSSxDQUMzQ2tCLElBQUksSUFBSTtNQUNOSCxlQUFNLENBQUNDLE9BQU8sQ0FBQywrQ0FBK0MsRUFBRUUsSUFBSSxDQUFDQyxFQUFFLEVBQUUxQixZQUFZLENBQUM7TUFDdEYsTUFBTXFCLE1BQU0sR0FBR0ksSUFBSSxDQUFDQyxFQUFFO01BQ3RCLElBQUksQ0FBQ1YsS0FBSyxDQUFDVyxHQUFHLENBQUMzQixZQUFZLEVBQUVxQixNQUFNLENBQUM7TUFDcEMsT0FBT1osT0FBTyxDQUFDZSxPQUFPLENBQUNILE1BQU0sQ0FBQztJQUNoQyxDQUFDLEVBQ0RPLEtBQUssSUFBSTtNQUNQTixlQUFNLENBQUNNLEtBQUssQ0FBQyxvREFBb0QsRUFBRTVCLFlBQVksRUFBRTRCLEtBQUssQ0FBQztNQUN2RixPQUFPbkIsT0FBTyxDQUFDQyxNQUFNLENBQUNrQixLQUFLLENBQUM7SUFDOUIsQ0FBQyxDQUNGO0VBQ0g7QUFDRjtBQUFDQyxPQUFBLENBQUFqQixpQkFBQSxHQUFBQSxpQkFBQSJ9