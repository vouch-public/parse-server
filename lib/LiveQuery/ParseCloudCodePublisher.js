"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ParseCloudCodePublisher = void 0;
var _ParsePubSub = require("./ParsePubSub");
var _node = _interopRequireDefault(require("parse/node"));
var _logger = _interopRequireDefault(require("../logger"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class ParseCloudCodePublisher {
  // config object of the publisher, right now it only contains the redisURL,
  // but we may extend it later.
  constructor(config = {}) {
    this.parsePublisher = _ParsePubSub.ParsePubSub.createPublisher(config);
  }
  async connect() {
    if (typeof this.parsePublisher.connect === 'function') {
      if (this.parsePublisher.isOpen) {
        return;
      }
      return Promise.resolve(this.parsePublisher.connect());
    }
  }
  onCloudCodeAfterSave(request) {
    this._onCloudCodeMessage(_node.default.applicationId + 'afterSave', request);
  }
  onCloudCodeAfterDelete(request) {
    this._onCloudCodeMessage(_node.default.applicationId + 'afterDelete', request);
  }
  onClearCachedRoles(user) {
    this.parsePublisher.publish(_node.default.applicationId + 'clearCache', JSON.stringify({
      userId: user.id
    }));
  }

  // Request is the request object from cloud code functions. request.object is a ParseObject.
  _onCloudCodeMessage(type, request) {
    _logger.default.verbose('Raw request from cloud code current : %j | original : %j', request.object, request.original);
    // We need the full JSON which includes className
    const message = {
      currentParseObject: request.object._toFullJSON()
    };
    if (request.original) {
      message.originalParseObject = request.original._toFullJSON();
    }
    if (request.classLevelPermissions) {
      message.classLevelPermissions = request.classLevelPermissions;
    }
    this.parsePublisher.publish(type, JSON.stringify(message));
  }
}
exports.ParseCloudCodePublisher = ParseCloudCodePublisher;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfUGFyc2VQdWJTdWIiLCJyZXF1aXJlIiwiX25vZGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2xvZ2dlciIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiUGFyc2VDbG91ZENvZGVQdWJsaXNoZXIiLCJjb25zdHJ1Y3RvciIsImNvbmZpZyIsInBhcnNlUHVibGlzaGVyIiwiUGFyc2VQdWJTdWIiLCJjcmVhdGVQdWJsaXNoZXIiLCJjb25uZWN0IiwiaXNPcGVuIiwiUHJvbWlzZSIsInJlc29sdmUiLCJvbkNsb3VkQ29kZUFmdGVyU2F2ZSIsInJlcXVlc3QiLCJfb25DbG91ZENvZGVNZXNzYWdlIiwiUGFyc2UiLCJhcHBsaWNhdGlvbklkIiwib25DbG91ZENvZGVBZnRlckRlbGV0ZSIsIm9uQ2xlYXJDYWNoZWRSb2xlcyIsInVzZXIiLCJwdWJsaXNoIiwiSlNPTiIsInN0cmluZ2lmeSIsInVzZXJJZCIsImlkIiwidHlwZSIsImxvZ2dlciIsInZlcmJvc2UiLCJvYmplY3QiLCJvcmlnaW5hbCIsIm1lc3NhZ2UiLCJjdXJyZW50UGFyc2VPYmplY3QiLCJfdG9GdWxsSlNPTiIsIm9yaWdpbmFsUGFyc2VPYmplY3QiLCJjbGFzc0xldmVsUGVybWlzc2lvbnMiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL0xpdmVRdWVyeS9QYXJzZUNsb3VkQ29kZVB1Ymxpc2hlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYXJzZVB1YlN1YiB9IGZyb20gJy4vUGFyc2VQdWJTdWInO1xuaW1wb3J0IFBhcnNlIGZyb20gJ3BhcnNlL25vZGUnO1xuaW1wb3J0IGxvZ2dlciBmcm9tICcuLi9sb2dnZXInO1xuXG5jbGFzcyBQYXJzZUNsb3VkQ29kZVB1Ymxpc2hlciB7XG4gIHBhcnNlUHVibGlzaGVyOiBPYmplY3Q7XG5cbiAgLy8gY29uZmlnIG9iamVjdCBvZiB0aGUgcHVibGlzaGVyLCByaWdodCBub3cgaXQgb25seSBjb250YWlucyB0aGUgcmVkaXNVUkwsXG4gIC8vIGJ1dCB3ZSBtYXkgZXh0ZW5kIGl0IGxhdGVyLlxuICBjb25zdHJ1Y3Rvcihjb25maWc6IGFueSA9IHt9KSB7XG4gICAgdGhpcy5wYXJzZVB1Ymxpc2hlciA9IFBhcnNlUHViU3ViLmNyZWF0ZVB1Ymxpc2hlcihjb25maWcpO1xuICB9XG5cbiAgYXN5bmMgY29ubmVjdCgpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMucGFyc2VQdWJsaXNoZXIuY29ubmVjdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKHRoaXMucGFyc2VQdWJsaXNoZXIuaXNPcGVuKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5wYXJzZVB1Ymxpc2hlci5jb25uZWN0KCkpO1xuICAgIH1cbiAgfVxuXG4gIG9uQ2xvdWRDb2RlQWZ0ZXJTYXZlKHJlcXVlc3Q6IGFueSk6IHZvaWQge1xuICAgIHRoaXMuX29uQ2xvdWRDb2RlTWVzc2FnZShQYXJzZS5hcHBsaWNhdGlvbklkICsgJ2FmdGVyU2F2ZScsIHJlcXVlc3QpO1xuICB9XG5cbiAgb25DbG91ZENvZGVBZnRlckRlbGV0ZShyZXF1ZXN0OiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLl9vbkNsb3VkQ29kZU1lc3NhZ2UoUGFyc2UuYXBwbGljYXRpb25JZCArICdhZnRlckRlbGV0ZScsIHJlcXVlc3QpO1xuICB9XG5cbiAgb25DbGVhckNhY2hlZFJvbGVzKHVzZXI6IFBhcnNlLk9iamVjdCkge1xuICAgIHRoaXMucGFyc2VQdWJsaXNoZXIucHVibGlzaChcbiAgICAgIFBhcnNlLmFwcGxpY2F0aW9uSWQgKyAnY2xlYXJDYWNoZScsXG4gICAgICBKU09OLnN0cmluZ2lmeSh7IHVzZXJJZDogdXNlci5pZCB9KVxuICAgICk7XG4gIH1cblxuICAvLyBSZXF1ZXN0IGlzIHRoZSByZXF1ZXN0IG9iamVjdCBmcm9tIGNsb3VkIGNvZGUgZnVuY3Rpb25zLiByZXF1ZXN0Lm9iamVjdCBpcyBhIFBhcnNlT2JqZWN0LlxuICBfb25DbG91ZENvZGVNZXNzYWdlKHR5cGU6IHN0cmluZywgcmVxdWVzdDogYW55KTogdm9pZCB7XG4gICAgbG9nZ2VyLnZlcmJvc2UoXG4gICAgICAnUmF3IHJlcXVlc3QgZnJvbSBjbG91ZCBjb2RlIGN1cnJlbnQgOiAlaiB8IG9yaWdpbmFsIDogJWonLFxuICAgICAgcmVxdWVzdC5vYmplY3QsXG4gICAgICByZXF1ZXN0Lm9yaWdpbmFsXG4gICAgKTtcbiAgICAvLyBXZSBuZWVkIHRoZSBmdWxsIEpTT04gd2hpY2ggaW5jbHVkZXMgY2xhc3NOYW1lXG4gICAgY29uc3QgbWVzc2FnZSA9IHtcbiAgICAgIGN1cnJlbnRQYXJzZU9iamVjdDogcmVxdWVzdC5vYmplY3QuX3RvRnVsbEpTT04oKSxcbiAgICB9O1xuICAgIGlmIChyZXF1ZXN0Lm9yaWdpbmFsKSB7XG4gICAgICBtZXNzYWdlLm9yaWdpbmFsUGFyc2VPYmplY3QgPSByZXF1ZXN0Lm9yaWdpbmFsLl90b0Z1bGxKU09OKCk7XG4gICAgfVxuICAgIGlmIChyZXF1ZXN0LmNsYXNzTGV2ZWxQZXJtaXNzaW9ucykge1xuICAgICAgbWVzc2FnZS5jbGFzc0xldmVsUGVybWlzc2lvbnMgPSByZXF1ZXN0LmNsYXNzTGV2ZWxQZXJtaXNzaW9ucztcbiAgICB9XG4gICAgdGhpcy5wYXJzZVB1Ymxpc2hlci5wdWJsaXNoKHR5cGUsIEpTT04uc3RyaW5naWZ5KG1lc3NhZ2UpKTtcbiAgfVxufVxuXG5leHBvcnQgeyBQYXJzZUNsb3VkQ29kZVB1Ymxpc2hlciB9O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxZQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxLQUFBLEdBQUFDLHNCQUFBLENBQUFGLE9BQUE7QUFDQSxJQUFBRyxPQUFBLEdBQUFELHNCQUFBLENBQUFGLE9BQUE7QUFBK0IsU0FBQUUsdUJBQUFFLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxLQUFBRSxPQUFBLEVBQUFGLEdBQUE7QUFFL0IsTUFBTUcsdUJBQXVCLENBQUM7RUFHNUI7RUFDQTtFQUNBQyxXQUFXQSxDQUFDQyxNQUFXLEdBQUcsQ0FBQyxDQUFDLEVBQUU7SUFDNUIsSUFBSSxDQUFDQyxjQUFjLEdBQUdDLHdCQUFXLENBQUNDLGVBQWUsQ0FBQ0gsTUFBTSxDQUFDO0VBQzNEO0VBRUEsTUFBTUksT0FBT0EsQ0FBQSxFQUFHO0lBQ2QsSUFBSSxPQUFPLElBQUksQ0FBQ0gsY0FBYyxDQUFDRyxPQUFPLEtBQUssVUFBVSxFQUFFO01BQ3JELElBQUksSUFBSSxDQUFDSCxjQUFjLENBQUNJLE1BQU0sRUFBRTtRQUM5QjtNQUNGO01BQ0EsT0FBT0MsT0FBTyxDQUFDQyxPQUFPLENBQUMsSUFBSSxDQUFDTixjQUFjLENBQUNHLE9BQU8sRUFBRSxDQUFDO0lBQ3ZEO0VBQ0Y7RUFFQUksb0JBQW9CQSxDQUFDQyxPQUFZLEVBQVE7SUFDdkMsSUFBSSxDQUFDQyxtQkFBbUIsQ0FBQ0MsYUFBSyxDQUFDQyxhQUFhLEdBQUcsV0FBVyxFQUFFSCxPQUFPLENBQUM7RUFDdEU7RUFFQUksc0JBQXNCQSxDQUFDSixPQUFZLEVBQVE7SUFDekMsSUFBSSxDQUFDQyxtQkFBbUIsQ0FBQ0MsYUFBSyxDQUFDQyxhQUFhLEdBQUcsYUFBYSxFQUFFSCxPQUFPLENBQUM7RUFDeEU7RUFFQUssa0JBQWtCQSxDQUFDQyxJQUFrQixFQUFFO0lBQ3JDLElBQUksQ0FBQ2QsY0FBYyxDQUFDZSxPQUFPLENBQ3pCTCxhQUFLLENBQUNDLGFBQWEsR0FBRyxZQUFZLEVBQ2xDSyxJQUFJLENBQUNDLFNBQVMsQ0FBQztNQUFFQyxNQUFNLEVBQUVKLElBQUksQ0FBQ0s7SUFBRyxDQUFDLENBQUMsQ0FDcEM7RUFDSDs7RUFFQTtFQUNBVixtQkFBbUJBLENBQUNXLElBQVksRUFBRVosT0FBWSxFQUFRO0lBQ3BEYSxlQUFNLENBQUNDLE9BQU8sQ0FDWiwwREFBMEQsRUFDMURkLE9BQU8sQ0FBQ2UsTUFBTSxFQUNkZixPQUFPLENBQUNnQixRQUFRLENBQ2pCO0lBQ0Q7SUFDQSxNQUFNQyxPQUFPLEdBQUc7TUFDZEMsa0JBQWtCLEVBQUVsQixPQUFPLENBQUNlLE1BQU0sQ0FBQ0ksV0FBVztJQUNoRCxDQUFDO0lBQ0QsSUFBSW5CLE9BQU8sQ0FBQ2dCLFFBQVEsRUFBRTtNQUNwQkMsT0FBTyxDQUFDRyxtQkFBbUIsR0FBR3BCLE9BQU8sQ0FBQ2dCLFFBQVEsQ0FBQ0csV0FBVyxFQUFFO0lBQzlEO0lBQ0EsSUFBSW5CLE9BQU8sQ0FBQ3FCLHFCQUFxQixFQUFFO01BQ2pDSixPQUFPLENBQUNJLHFCQUFxQixHQUFHckIsT0FBTyxDQUFDcUIscUJBQXFCO0lBQy9EO0lBQ0EsSUFBSSxDQUFDN0IsY0FBYyxDQUFDZSxPQUFPLENBQUNLLElBQUksRUFBRUosSUFBSSxDQUFDQyxTQUFTLENBQUNRLE9BQU8sQ0FBQyxDQUFDO0VBQzVEO0FBQ0Y7QUFBQ0ssT0FBQSxDQUFBakMsdUJBQUEsR0FBQUEsdUJBQUEifQ==