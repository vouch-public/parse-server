"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SubCache = exports.CacheController = void 0;
var _AdaptableController = _interopRequireDefault(require("./AdaptableController"));
var _CacheAdapter = _interopRequireDefault(require("../Adapters/Cache/CacheAdapter"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const KEY_SEPARATOR_CHAR = ':';
function joinKeys(...keys) {
  return keys.join(KEY_SEPARATOR_CHAR);
}

/**
 * Prefix all calls to the cache via a prefix string, useful when grouping Cache by object type.
 *
 * eg "Role" or "Session"
 */
class SubCache {
  constructor(prefix, cacheController, ttl) {
    this.prefix = prefix;
    this.cache = cacheController;
    this.ttl = ttl;
  }
  get(key) {
    const cacheKey = joinKeys(this.prefix, key);
    return this.cache.get(cacheKey);
  }
  put(key, value, ttl) {
    const cacheKey = joinKeys(this.prefix, key);
    return this.cache.put(cacheKey, value, ttl);
  }
  del(key) {
    const cacheKey = joinKeys(this.prefix, key);
    return this.cache.del(cacheKey);
  }
  clear() {
    return this.cache.clear();
  }
}
exports.SubCache = SubCache;
class CacheController extends _AdaptableController.default {
  constructor(adapter, appId, options = {}) {
    super(adapter, appId, options);
    this.role = new SubCache('role', this);
    this.user = new SubCache('user', this);
    this.graphQL = new SubCache('graphQL', this);
  }
  get(key) {
    const cacheKey = joinKeys(this.appId, key);
    return this.adapter.get(cacheKey).then(null, () => Promise.resolve(null));
  }
  put(key, value, ttl) {
    const cacheKey = joinKeys(this.appId, key);
    return this.adapter.put(cacheKey, value, ttl);
  }
  del(key) {
    const cacheKey = joinKeys(this.appId, key);
    return this.adapter.del(cacheKey);
  }
  clear() {
    return this.adapter.clear();
  }
  expectedAdapterType() {
    return _CacheAdapter.default;
  }
}
exports.CacheController = CacheController;
var _default = CacheController;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfQWRhcHRhYmxlQ29udHJvbGxlciIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX0NhY2hlQWRhcHRlciIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiS0VZX1NFUEFSQVRPUl9DSEFSIiwiam9pbktleXMiLCJrZXlzIiwiam9pbiIsIlN1YkNhY2hlIiwiY29uc3RydWN0b3IiLCJwcmVmaXgiLCJjYWNoZUNvbnRyb2xsZXIiLCJ0dGwiLCJjYWNoZSIsImdldCIsImtleSIsImNhY2hlS2V5IiwicHV0IiwidmFsdWUiLCJkZWwiLCJjbGVhciIsImV4cG9ydHMiLCJDYWNoZUNvbnRyb2xsZXIiLCJBZGFwdGFibGVDb250cm9sbGVyIiwiYWRhcHRlciIsImFwcElkIiwib3B0aW9ucyIsInJvbGUiLCJ1c2VyIiwiZ3JhcGhRTCIsInRoZW4iLCJQcm9taXNlIiwicmVzb2x2ZSIsImV4cGVjdGVkQWRhcHRlclR5cGUiLCJDYWNoZUFkYXB0ZXIiLCJfZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Db250cm9sbGVycy9DYWNoZUNvbnRyb2xsZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEFkYXB0YWJsZUNvbnRyb2xsZXIgZnJvbSAnLi9BZGFwdGFibGVDb250cm9sbGVyJztcbmltcG9ydCBDYWNoZUFkYXB0ZXIgZnJvbSAnLi4vQWRhcHRlcnMvQ2FjaGUvQ2FjaGVBZGFwdGVyJztcblxuY29uc3QgS0VZX1NFUEFSQVRPUl9DSEFSID0gJzonO1xuXG5mdW5jdGlvbiBqb2luS2V5cyguLi5rZXlzKSB7XG4gIHJldHVybiBrZXlzLmpvaW4oS0VZX1NFUEFSQVRPUl9DSEFSKTtcbn1cblxuLyoqXG4gKiBQcmVmaXggYWxsIGNhbGxzIHRvIHRoZSBjYWNoZSB2aWEgYSBwcmVmaXggc3RyaW5nLCB1c2VmdWwgd2hlbiBncm91cGluZyBDYWNoZSBieSBvYmplY3QgdHlwZS5cbiAqXG4gKiBlZyBcIlJvbGVcIiBvciBcIlNlc3Npb25cIlxuICovXG5leHBvcnQgY2xhc3MgU3ViQ2FjaGUge1xuICBjb25zdHJ1Y3RvcihwcmVmaXgsIGNhY2hlQ29udHJvbGxlciwgdHRsKSB7XG4gICAgdGhpcy5wcmVmaXggPSBwcmVmaXg7XG4gICAgdGhpcy5jYWNoZSA9IGNhY2hlQ29udHJvbGxlcjtcbiAgICB0aGlzLnR0bCA9IHR0bDtcbiAgfVxuXG4gIGdldChrZXkpIHtcbiAgICBjb25zdCBjYWNoZUtleSA9IGpvaW5LZXlzKHRoaXMucHJlZml4LCBrZXkpO1xuICAgIHJldHVybiB0aGlzLmNhY2hlLmdldChjYWNoZUtleSk7XG4gIH1cblxuICBwdXQoa2V5LCB2YWx1ZSwgdHRsKSB7XG4gICAgY29uc3QgY2FjaGVLZXkgPSBqb2luS2V5cyh0aGlzLnByZWZpeCwga2V5KTtcbiAgICByZXR1cm4gdGhpcy5jYWNoZS5wdXQoY2FjaGVLZXksIHZhbHVlLCB0dGwpO1xuICB9XG5cbiAgZGVsKGtleSkge1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gam9pbktleXModGhpcy5wcmVmaXgsIGtleSk7XG4gICAgcmV0dXJuIHRoaXMuY2FjaGUuZGVsKGNhY2hlS2V5KTtcbiAgfVxuXG4gIGNsZWFyKCkge1xuICAgIHJldHVybiB0aGlzLmNhY2hlLmNsZWFyKCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENhY2hlQ29udHJvbGxlciBleHRlbmRzIEFkYXB0YWJsZUNvbnRyb2xsZXIge1xuICBjb25zdHJ1Y3RvcihhZGFwdGVyLCBhcHBJZCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgc3VwZXIoYWRhcHRlciwgYXBwSWQsIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5yb2xlID0gbmV3IFN1YkNhY2hlKCdyb2xlJywgdGhpcyk7XG4gICAgdGhpcy51c2VyID0gbmV3IFN1YkNhY2hlKCd1c2VyJywgdGhpcyk7XG4gICAgdGhpcy5ncmFwaFFMID0gbmV3IFN1YkNhY2hlKCdncmFwaFFMJywgdGhpcyk7XG4gIH1cblxuICBnZXQoa2V5KSB7XG4gICAgY29uc3QgY2FjaGVLZXkgPSBqb2luS2V5cyh0aGlzLmFwcElkLCBrZXkpO1xuICAgIHJldHVybiB0aGlzLmFkYXB0ZXIuZ2V0KGNhY2hlS2V5KS50aGVuKG51bGwsICgpID0+IFByb21pc2UucmVzb2x2ZShudWxsKSk7XG4gIH1cblxuICBwdXQoa2V5LCB2YWx1ZSwgdHRsKSB7XG4gICAgY29uc3QgY2FjaGVLZXkgPSBqb2luS2V5cyh0aGlzLmFwcElkLCBrZXkpO1xuICAgIHJldHVybiB0aGlzLmFkYXB0ZXIucHV0KGNhY2hlS2V5LCB2YWx1ZSwgdHRsKTtcbiAgfVxuXG4gIGRlbChrZXkpIHtcbiAgICBjb25zdCBjYWNoZUtleSA9IGpvaW5LZXlzKHRoaXMuYXBwSWQsIGtleSk7XG4gICAgcmV0dXJuIHRoaXMuYWRhcHRlci5kZWwoY2FjaGVLZXkpO1xuICB9XG5cbiAgY2xlYXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuYWRhcHRlci5jbGVhcigpO1xuICB9XG5cbiAgZXhwZWN0ZWRBZGFwdGVyVHlwZSgpIHtcbiAgICByZXR1cm4gQ2FjaGVBZGFwdGVyO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENhY2hlQ29udHJvbGxlcjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsb0JBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLGFBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUEwRCxTQUFBRCx1QkFBQUcsR0FBQSxXQUFBQSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxHQUFBRCxHQUFBLEtBQUFFLE9BQUEsRUFBQUYsR0FBQTtBQUUxRCxNQUFNRyxrQkFBa0IsR0FBRyxHQUFHO0FBRTlCLFNBQVNDLFFBQVFBLENBQUMsR0FBR0MsSUFBSSxFQUFFO0VBQ3pCLE9BQU9BLElBQUksQ0FBQ0MsSUFBSSxDQUFDSCxrQkFBa0IsQ0FBQztBQUN0Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sTUFBTUksUUFBUSxDQUFDO0VBQ3BCQyxXQUFXQSxDQUFDQyxNQUFN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