"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.load = exports.getUserFromSessionToken = void 0;
var _graphql = require("graphql");
var _graphqlListFields = _interopRequireDefault(require("graphql-list-fields"));
var _node = _interopRequireDefault(require("parse/node"));
var _rest = _interopRequireDefault(require("../../rest"));
var _parseClassTypes = require("./parseClassTypes");
var _Auth = require("../../Auth");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const getUserFromSessionToken = async (context, queryInfo, keysPrefix, userId) => {
  const {
    info,
    config
  } = context;
  if (!info || !info.sessionToken) {
    throw new _node.default.Error(_node.default.Error.INVALID_SESSION_TOKEN, 'Invalid session token');
  }
  const sessionToken = info.sessionToken;
  const selectedFields = (0, _graphqlListFields.default)(queryInfo).filter(field => field.startsWith(keysPrefix)).map(field => field.replace(keysPrefix, ''));
  const keysAndInclude = (0, _parseClassTypes.extractKeysAndInclude)(selectedFields);
  const {
    keys
  } = keysAndInclude;
  let {
    include
  } = keysAndInclude;
  if (userId && !keys && !include) {
    return {
      sessionToken
    };
  } else if (keys && !include) {
    include = 'user';
  }
  if (userId) {
    // We need to re create the auth context
    // to avoid security breach if userId is provided
    context.auth = new _Auth.Auth({
      config,
      isMaster: context.auth.isMaster,
      user: {
        id: userId
      }
    });
  }
  const options = {};
  if (keys) {
    options.keys = keys.split(',').map(key => `${key}`).join(',');
  }
  if (include) {
    options.include = include.split(',').map(included => `${included}`).join(',');
  }
  const response = await _rest.default.find(config, context.auth, '_User',
  // Get the user it self from auth object
  {
    objectId: context.auth.user.id
  }, options, info.clientVersion, info.context);
  if (!response.results || response.results.length == 0) {
    throw new _node.default.Error(_node.default.Error.INVALID_SESSION_TOKEN, 'Invalid session token');
  } else {
    const user = response.results[0];
    return {
      sessionToken,
      user
    };
  }
};
exports.getUserFromSessionToken = getUserFromSessionToken;
const load = parseGraphQLSchema => {
  if (parseGraphQLSchema.isUsersClassDisabled) {
    return;
  }
  parseGraphQLSchema.addGraphQLQuery('viewer', {
    description: 'The viewer query can be used to return the current user data.',
    type: new _graphql.GraphQLNonNull(parseGraphQLSchema.viewerType),
    async resolve(_source, _args, context, queryInfo) {
      try {
        return await getUserFromSessionToken(context, queryInfo, 'user.', false);
      } catch (e) {
        parseGraphQLSchema.handleError(e);
      }
    }
  }, true, true);
};
exports.load = load;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,