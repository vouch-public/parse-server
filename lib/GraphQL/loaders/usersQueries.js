"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.load = exports.getUserFromSessionToken = void 0;
var _graphql = require("graphql");
var _graphqlListFields = _interopRequireDefault(require("graphql-list-fields"));
var _node = _interopRequireDefault(require("parse/node"));
var _rest = _interopRequireDefault(require("../../rest"));
var _parseClassTypes = require("./parseClassTypes");
var _Auth = require("../../Auth");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const getUserFromSessionToken = async (context, queryInfo, keysPrefix, userId) => {
  const {
    info,
    config
  } = context;
  if (!info || !info.sessionToken) {
    throw new _node.default.Error(_node.default.Error.INVALID_SESSION_TOKEN, 'Invalid session token');
  }
  const sessionToken = info.sessionToken;
  const selectedFields = (0, _graphqlListFields.default)(queryInfo).filter(field => field.startsWith(keysPrefix)).map(field => field.replace(keysPrefix, ''));
  const keysAndInclude = (0, _parseClassTypes.extractKeysAndInclude)(selectedFields);
  const {
    keys
  } = keysAndInclude;
  let {
    include
  } = keysAndInclude;
  if (userId && !keys && !include) {
    return {
      sessionToken
    };
  } else if (keys && !include) {
    include = 'user';
  }
  if (userId) {
    // We need to re create the auth context
    // to avoid security breach if userId is provided
    context.auth = new _Auth.Auth({
      config,
      isMaster: context.auth.isMaster,
      user: {
        id: userId
      }
    });
  }
  const options = {};
  if (keys) {
    options.keys = keys.split(',').map(key => `${key}`).join(',');
  }
  if (include) {
    options.include = include.split(',').map(included => `${included}`).join(',');
  }
  const response = await _rest.default.find(config, context.auth, '_User',
  // Get the user it self from auth object
  {
    objectId: context.auth.user.id
  }, options, info.clientVersion, info.context);
  if (!response.results || response.results.length == 0) {
    throw new _node.default.Error(_node.default.Error.INVALID_SESSION_TOKEN, 'Invalid session token');
  } else {
    const user = response.results[0];
    return {
      sessionToken,
      user
    };
  }
};
exports.getUserFromSessionToken = getUserFromSessionToken;
const load = parseGraphQLSchema => {
  if (parseGraphQLSchema.isUsersClassDisabled) {
    return;
  }
  parseGraphQLSchema.addGraphQLQuery('viewer', {
    description: 'The viewer query can be used to return the current user data.',
    type: new _graphql.GraphQLNonNull(parseGraphQLSchema.viewerType),
    async resolve(_source, _args, context, queryInfo) {
      try {
        return await getUserFromSessionToken(context, queryInfo, 'user.', false);
      } catch (e) {
        parseGraphQLSchema.handleError(e);
      }
    }
  }, true, true);
};
exports.load = load;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZXRVc2VyRnJvbVNlc3Npb25Ub2tlbiIsImNvbnRleHQiLCJxdWVyeUluZm8iLCJrZXlzUHJlZml4IiwidXNlcklkIiwiaW5mbyIsImNvbmZpZyIsInNlc3Npb25Ub2tlbiIsIlBhcnNlIiwiRXJyb3IiLCJJTlZBTElEX1NFU1NJT05fVE9LRU4iLCJzZWxlY3RlZEZpZWxkcyIsImdldEZpZWxkTmFtZXMiLCJmaWx0ZXIiLCJmaWVsZCIsInN0YXJ0c1dpdGgiLCJtYXAiLCJyZXBsYWNlIiwia2V5c0FuZEluY2x1ZGUiLCJleHRyYWN0S2V5c0FuZEluY2x1ZGUiLCJrZXlzIiwiaW5jbHVkZSIsImF1dGgiLCJBdXRoIiwiaXNNYXN0ZXIiLCJ1c2VyIiwiaWQiLCJvcHRpb25zIiwic3BsaXQiLCJrZXkiLCJqb2luIiwiaW5jbHVkZWQiLCJyZXNwb25zZSIsInJlc3QiLCJmaW5kIiwib2JqZWN0SWQiLCJjbGllbnRWZXJzaW9uIiwicmVzdWx0cyIsImxlbmd0aCIsImxvYWQiLCJwYXJzZUdyYXBoUUxTY2hlbWEiLCJpc1VzZXJzQ2xhc3NEaXNhYmxlZCIsImFkZEdyYXBoUUxRdWVyeSIsImRlc2NyaXB0aW9uIiwidHlwZSIsIkdyYXBoUUxOb25OdWxsIiwidmlld2VyVHlwZSIsInJlc29sdmUiLCJfc291cmNlIiwiX2FyZ3MiLCJlIiwiaGFuZGxlRXJyb3IiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvR3JhcGhRTC9sb2FkZXJzL3VzZXJzUXVlcmllcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHcmFwaFFMTm9uTnVsbCB9IGZyb20gJ2dyYXBocWwnO1xuaW1wb3J0IGdldEZpZWxkTmFtZXMgZnJvbSAnZ3JhcGhxbC1saXN0LWZpZWxkcyc7XG5pbXBvcnQgUGFyc2UgZnJvbSAncGFyc2Uvbm9kZSc7XG5pbXBvcnQgcmVzdCBmcm9tICcuLi8uLi9yZXN0JztcbmltcG9ydCB7IGV4dHJhY3RLZXlzQW5kSW5jbHVkZSB9IGZyb20gJy4vcGFyc2VDbGFzc1R5cGVzJztcbmltcG9ydCB7IEF1dGggfSBmcm9tICcuLi8uLi9BdXRoJztcblxuY29uc3QgZ2V0VXNlckZyb21TZXNzaW9uVG9rZW4gPSBhc3luYyAoY29udGV4dCwgcXVlcnlJbmZvLCBrZXlzUHJlZml4LCB1c2VySWQpID0+IHtcbiAgY29uc3QgeyBpbmZvLCBjb25maWcgfSA9IGNvbnRleHQ7XG4gIGlmICghaW5mbyB8fCAhaW5mby5zZXNzaW9uVG9rZW4pIHtcbiAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoUGFyc2UuRXJyb3IuSU5WQUxJRF9TRVNTSU9OX1RPS0VOLCAnSW52YWxpZCBzZXNzaW9uIHRva2VuJyk7XG4gIH1cbiAgY29uc3Qgc2Vzc2lvblRva2VuID0gaW5mby5zZXNzaW9uVG9rZW47XG4gIGNvbnN0IHNlbGVjdGVkRmllbGRzID0gZ2V0RmllbGROYW1lcyhxdWVyeUluZm8pXG4gICAgLmZpbHRlcihmaWVsZCA9PiBmaWVsZC5zdGFydHNXaXRoKGtleXNQcmVmaXgpKVxuICAgIC5tYXAoZmllbGQgPT4gZmllbGQucmVwbGFjZShrZXlzUHJlZml4LCAnJykpO1xuXG4gIGNvbnN0IGtleXNBbmRJbmNsdWRlID0gZXh0cmFjdEtleXNBbmRJbmNsdWRlKHNlbGVjdGVkRmllbGRzKTtcbiAgY29uc3QgeyBrZXlzIH0gPSBrZXlzQW5kSW5jbHVkZTtcbiAgbGV0IHsgaW5jbHVkZSB9ID0ga2V5c0FuZEluY2x1ZGU7XG5cbiAgaWYgKHVzZXJJZCAmJiAha2V5cyAmJiAhaW5jbHVkZSkge1xuICAgIHJldHVybiB7XG4gICAgICBzZXNzaW9uVG9rZW4sXG4gICAgfTtcbiAgfSBlbHNlIGlmIChrZXlzICYmICFpbmNsdWRlKSB7XG4gICAgaW5jbHVkZSA9ICd1c2VyJztcbiAgfVxuXG4gIGlmICh1c2VySWQpIHtcbiAgICAvLyBXZSBuZWVkIHRvIHJlIGNyZWF0ZSB0aGUgYXV0aCBjb250ZXh0XG4gICAgLy8gdG8gYXZvaWQgc2VjdXJpdHkgYnJlYWNoIGlmIHVzZXJJZCBpcyBwcm92aWRlZFxuICAgIGNvbnRleHQuYXV0aCA9IG5ldyBBdXRoKHtcbiAgICAgIGNvbmZpZyxcbiAgICAgIGlzTWFzdGVyOiBjb250ZXh0LmF1dGguaXNNYXN0ZXIsXG4gICAgICB1c2VyOiB7IGlkOiB1c2VySWQgfSxcbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0IG9wdGlvbnMgPSB7fTtcbiAgaWYgKGtleXMpIHtcbiAgICBvcHRpb25zLmtleXMgPSBrZXlzXG4gICAgICAuc3BsaXQoJywnKVxuICAgICAgLm1hcChrZXkgPT4gYCR7a2V5fWApXG4gICAgICAuam9pbignLCcpO1xuICB9XG4gIGlmIChpbmNsdWRlKSB7XG4gICAgb3B0aW9ucy5pbmNsdWRlID0gaW5jbHVkZVxuICAgICAgLnNwbGl0KCcsJylcbiAgICAgIC5tYXAoaW5jbHVkZWQgPT4gYCR7aW5jbHVkZWR9YClcbiAgICAgIC5qb2luKCcsJyk7XG4gIH1cblxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlc3QuZmluZChcbiAgICBjb25maWcsXG4gICAgY29udGV4dC5hdXRoLFxuICAgICdfVXNlcicsXG4gICAgLy8gR2V0IHRoZSB1c2VyIGl0IHNlbGYgZnJvbSBhdXRoIG9iamVjdFxuICAgIHsgb2JqZWN0SWQ6IGNvbnRleHQuYXV0aC51c2VyLmlkIH0sXG4gICAgb3B0aW9ucyxcbiAgICBpbmZvLmNsaWVudFZlcnNpb24sXG4gICAgaW5mby5jb250ZXh0XG4gICk7XG4gIGlmICghcmVzcG9uc2UucmVzdWx0cyB8fCByZXNwb25zZS5yZXN1bHRzLmxlbmd0aCA9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFBhcnNlLkVycm9yLklOVkFMSURfU0VTU0lPTl9UT0tFTiwgJ0ludmFsaWQgc2Vzc2lvbiB0b2tlbicpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHVzZXIgPSByZXNwb25zZS5yZXN1bHRzWzBdO1xuICAgIHJldHVybiB7XG4gICAgICBzZXNzaW9uVG9rZW4sXG4gICAgICB1c2VyLFxuICAgIH07XG4gIH1cbn07XG5cbmNvbnN0IGxvYWQgPSBwYXJzZUdyYXBoUUxTY2hlbWEgPT4ge1xuICBpZiAocGFyc2VHcmFwaFFMU2NoZW1hLmlzVXNlcnNDbGFzc0Rpc2FibGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcGFyc2VHcmFwaFFMU2NoZW1hLmFkZEdyYXBoUUxRdWVyeShcbiAgICAndmlld2VyJyxcbiAgICB7XG4gICAgICBkZXNjcmlwdGlvbjogJ1RoZSB2aWV3ZXIgcXVlcnkgY2FuIGJlIHVzZWQgdG8gcmV0dXJuIHRoZSBjdXJyZW50IHVzZXIgZGF0YS4nLFxuICAgICAgdHlwZTogbmV3IEdyYXBoUUxOb25OdWxsKHBhcnNlR3JhcGhRTFNjaGVtYS52aWV3ZXJUeXBlKSxcbiAgICAgIGFzeW5jIHJlc29sdmUoX3NvdXJjZSwgX2FyZ3MsIGNvbnRleHQsIHF1ZXJ5SW5mbykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBhd2FpdCBnZXRVc2VyRnJvbVNlc3Npb25Ub2tlbihjb250ZXh0LCBxdWVyeUluZm8sICd1c2VyLicsIGZhbHNlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHBhcnNlR3JhcGhRTFNjaGVtYS5oYW5kbGVFcnJvcihlKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9LFxuICAgIHRydWUsXG4gICAgdHJ1ZVxuICApO1xufTtcblxuZXhwb3J0IHsgbG9hZCwgZ2V0VXNlckZyb21TZXNzaW9uVG9rZW4gfTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQWtDO0FBRWxDLE1BQU1BLHVCQUF1QixHQUFHLE9BQU9DLE9BQU8sRUFBRUMsU0FBUyxFQUFFQyxVQUFVLEVBQUVDLE1BQU0sS0FBSztFQUNoRixNQUFNO0lBQUVDLElBQUk7SUFBRUM7RUFBTyxDQUFDLEdBQUdMLE9BQU87RUFDaEMsSUFBSSxDQUFDSSxJQUFJLElBQUksQ0FBQ0EsSUFBSSxDQUFDRSxZQUFZLEVBQUU7SUFDL0IsTUFBTSxJ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