"use strict";

function numberParser(key) {
  return function (opt) {
    const intOpt = parseInt(opt);
    if (!Number.isInteger(intOpt)) {
      throw new Error(`Key ${key} has invalid value ${opt}`);
    }
    return intOpt;
  };
}
function numberOrBoolParser(key) {
  return function (opt) {
    if (typeof opt === 'boolean') {
      return opt;
    }
    if (opt === 'true') {
      return true;
    }
    if (opt === 'false') {
      return false;
    }
    return numberParser(key)(opt);
  };
}
function objectParser(opt) {
  if (typeof opt == 'object') {
    return opt;
  }
  return JSON.parse(opt);
}
function arrayParser(opt) {
  if (Array.isArray(opt)) {
    return opt;
  } else if (typeof opt === 'string') {
    return opt.split(',');
  } else {
    throw new Error(`${opt} should be a comma separated string or an array`);
  }
}
function moduleOrObjectParser(opt) {
  if (typeof opt == 'object') {
    return opt;
  }
  try {
    return JSON.parse(opt);
  } catch (e) {
    /* */
  }
  return opt;
}
function booleanParser(opt) {
  if (opt == true || opt == 'true' || opt == '1') {
    return true;
  }
  return false;
}
function nullParser(opt) {
  if (opt == 'null') {
    return null;
  }
  return opt;
}
module.exports = {
  numberParser,
  numberOrBoolParser,
  nullParser,
  booleanParser,
  moduleOrObjectParser,
  arrayParser,
  objectParser
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJudW1iZXJQYXJzZXIiLCJrZXkiLCJvcHQiLCJpbnRPcHQiLCJwYXJzZUludCIsIk51bWJlciIsImlzSW50ZWdlciIsIkVycm9yIiwibnVtYmVyT3JCb29sUGFyc2VyIiwib2JqZWN0UGFyc2VyIiwiSlNPTiIsInBhcnNlIiwiYXJyYXlQYXJzZXIiLCJBcnJheSIsImlzQXJyYXkiLCJzcGxpdCIsIm1vZHVsZU9yT2JqZWN0UGFyc2VyIiwiZSIsImJvb2xlYW5QYXJzZXIiLCJudWxsUGFyc2VyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9PcHRpb25zL3BhcnNlcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gbnVtYmVyUGFyc2VyKGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24gKG9wdCkge1xuICAgIGNvbnN0IGludE9wdCA9IHBhcnNlSW50KG9wdCk7XG4gICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKGludE9wdCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgS2V5ICR7a2V5fSBoYXMgaW52YWxpZCB2YWx1ZSAke29wdH1gKTtcbiAgICB9XG4gICAgcmV0dXJuIGludE9wdDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbnVtYmVyT3JCb29sUGFyc2VyKGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24gKG9wdCkge1xuICAgIGlmICh0eXBlb2Ygb3B0ID09PSAnYm9vbGVhbicpIHtcbiAgICAgIHJldHVybiBvcHQ7XG4gICAgfVxuICAgIGlmIChvcHQgPT09ICd0cnVlJykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChvcHQgPT09ICdmYWxzZScpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIG51bWJlclBhcnNlcihrZXkpKG9wdCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9iamVjdFBhcnNlcihvcHQpIHtcbiAgaWYgKHR5cGVvZiBvcHQgPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gb3B0O1xuICB9XG4gIHJldHVybiBKU09OLnBhcnNlKG9wdCk7XG59XG5cbmZ1bmN0aW9uIGFycmF5UGFyc2VyKG9wdCkge1xuICBpZiAoQXJyYXkuaXNBcnJheShvcHQpKSB7XG4gICAgcmV0dXJuIG9wdDtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygb3B0ID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBvcHQuc3BsaXQoJywnKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYCR7b3B0fSBzaG91bGQgYmUgYSBjb21tYSBzZXBhcmF0ZWQgc3RyaW5nIG9yIGFuIGFycmF5YCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbW9kdWxlT3JPYmplY3RQYXJzZXIob3B0KSB7XG4gIGlmICh0eXBlb2Ygb3B0ID09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIG9wdDtcbiAgfVxuICB0cnkge1xuICAgIHJldHVybiBKU09OLnBhcnNlKG9wdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvKiAqL1xuICB9XG4gIHJldHVybiBvcHQ7XG59XG5cbmZ1bmN0aW9uIGJvb2xlYW5QYXJzZXIob3B0KSB7XG4gIGlmIChvcHQgPT0gdHJ1ZSB8fCBvcHQgPT0gJ3RydWUnIHx8IG9wdCA9PSAnMScpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIG51bGxQYXJzZXIob3B0KSB7XG4gIGlmIChvcHQgPT0gJ251bGwnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIG9wdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIG51bWJlclBhcnNlcixcbiAgbnVtYmVyT3JCb29sUGFyc2VyLFxuICBudWxsUGFyc2VyLFxuICBib29sZWFuUGFyc2VyLFxuICBtb2R1bGVPck9iamVjdFBhcnNlcixcbiAgYXJyYXlQYXJzZXIsXG4gIG9iamVjdFBhcnNlcixcbn07XG4iXSwibWFwcGluZ3MiOiI7O0FBQUEsU0FBU0EsWUFBWUEs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