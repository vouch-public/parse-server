"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PushQueue = void 0;
var _ParseMessageQueue = require("../ParseMessageQueue");
var _rest = _interopRequireDefault(require("../rest"));
var _utils = require("./utils");
var _node = _interopRequireDefault(require("parse/node"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const PUSH_CHANNEL = 'parse-server-push';
const DEFAULT_BATCH_SIZE = 100;
class PushQueue {
  // config object of the publisher, right now it only contains the redisURL,
  // but we may extend it later.
  constructor(config = {}) {
    this.channel = config.channel || PushQueue.defaultPushChannel();
    this.batchSize = config.batchSize || DEFAULT_BATCH_SIZE;
    this.parsePublisher = _ParseMessageQueue.ParseMessageQueue.createPublisher(config);
  }
  static defaultPushChannel() {
    return `${_node.default.applicationId}-${PUSH_CHANNEL}`;
  }
  enqueue(body, where, config, auth, pushStatus) {
    const limit = this.batchSize;
    where = (0, _utils.applyDeviceTokenExists)(where);

    // Order by objectId so no impact on the DB
    const order = 'objectId';
    return Promise.resolve().then(() => {
      return _rest.default.find(config, auth, '_Installation', where, {
        limit: 0,
        count: true
      });
    }).then(({
      results,
      count
    }) => {
      if (!results || count == 0) {
        return pushStatus.complete();
      }
      pushStatus.setRunning(Math.ceil(count / limit));
      let skip = 0;
      while (skip < count) {
        const query = {
          where,
          limit,
          skip,
          order
        };
        const pushWorkItem = {
          body,
          query,
          pushStatus: {
            objectId: pushStatus.objectId
          },
          applicationId: config.applicationId
        };
        this.parsePublisher.publish(this.channel, JSON.stringify(pushWorkItem));
        skip += limit;
      }
    });
  }
}
exports.PushQueue = PushQueue;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQVVNIX0NIQU5ORUwiLCJERUZBVUxUX0JBVENIX1NJWkUiLCJQdXNoUXVldWUiLCJjb25zdHJ1Y3RvciIsImNvbmZpZyIsImNoYW5uZWwiLCJkZWZhdWx0UHVzaENoYW5uZWwiLCJiYXRjaFNpemUiLCJwYXJzZVB1Ymxpc2hlciIsIlBhcnNlTWVzc2FnZVF1ZXVlIiwiY3JlYXRlUHVibGlzaGVyIiwiUGFyc2UiLCJhcHBsaWNhdGlvbklkIiwiZW5xdWV1ZSIsImJvZHkiLCJ3aGVyZSIsImF1dGgiLCJwdXNoU3RhdHVzIiwibGltaXQiLCJhcHBseURldmljZVRva2VuRXhpc3RzIiwib3JkZXIiLCJQcm9taXNlIiwicmVzb2x2ZSIsInRoZW4iLCJyZXN0IiwiZmluZCIsImNvdW50IiwicmVzdWx0cyIsImNvbXBsZXRlIiwic2V0UnVubmluZyIsIk1hdGgiLCJjZWlsIiwic2tpcCIsInF1ZXJ5IiwicHVzaFdvcmtJdGVtIiwib2JqZWN0SWQiLCJwdWJsaXNoIiwiSlNPTiIsInN0cmluZ2lmeSJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9QdXNoL1B1c2hRdWV1ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYXJzZU1lc3NhZ2VRdWV1ZSB9IGZyb20gJy4uL1BhcnNlTWVzc2FnZVF1ZXVlJztcbmltcG9ydCByZXN0IGZyb20gJy4uL3Jlc3QnO1xuaW1wb3J0IHsgYXBwbHlEZXZpY2VUb2tlbkV4aXN0cyB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IFBhcnNlIGZyb20gJ3BhcnNlL25vZGUnO1xuXG5jb25zdCBQVVNIX0NIQU5ORUwgPSAncGFyc2Utc2VydmVyLXB1c2gnO1xuY29uc3QgREVGQVVMVF9CQVRDSF9TSVpFID0gMTAwO1xuXG5leHBvcnQgY2xhc3MgUHVzaFF1ZXVlIHtcbiAgcGFyc2VQdWJsaXNoZXI6IE9iamVjdDtcbiAgY2hhbm5lbDogU3RyaW5nO1xuICBiYXRjaFNpemU6IE51bWJlcjtcblxuICAvLyBjb25maWcgb2JqZWN0IG9mIHRoZSBwdWJsaXNoZXIsIHJpZ2h0IG5vdyBpdCBvbmx5IGNvbnRhaW5zIHRoZSByZWRpc1VSTCxcbiAgLy8gYnV0IHdlIG1heSBleHRlbmQgaXQgbGF0ZXIuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogYW55ID0ge30pIHtcbiAgICB0aGlzLmNoYW5uZWwgPSBjb25maWcuY2hhbm5lbCB8fCBQdXNoUXVldWUuZGVmYXVsdFB1c2hDaGFubmVsKCk7XG4gICAgdGhpcy5iYXRjaFNpemUgPSBjb25maWcuYmF0Y2hTaXplIHx8IERFRkFVTFRfQkFUQ0hfU0laRTtcbiAgICB0aGlzLnBhcnNlUHVibGlzaGVyID0gUGFyc2VNZXNzYWdlUXVldWUuY3JlYXRlUHVibGlzaGVyKGNvbmZpZyk7XG4gIH1cblxuICBzdGF0aWMgZGVmYXVsdFB1c2hDaGFubmVsKCkge1xuICAgIHJldHVybiBgJHtQYXJzZS5hcHBsaWNhdGlvbklkfS0ke1BVU0hfQ0hBTk5FTH1gO1xuICB9XG5cbiAgZW5xdWV1ZShib2R5LCB3aGVyZSwgY29uZmlnLCBhdXRoLCBwdXNoU3RhdHVzKSB7XG4gICAgY29uc3QgbGltaXQgPSB0aGlzLmJhdGNoU2l6ZTtcblxuICAgIHdoZXJlID0gYXBwbHlEZXZpY2VUb2tlbkV4aXN0cyh3aGVyZSk7XG5cbiAgICAvLyBPcmRlciBieSBvYmplY3RJZCBzbyBubyBpbXBhY3Qgb24gdGhlIERCXG4gICAgY29uc3Qgb3JkZXIgPSAnb2JqZWN0SWQnO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICByZXR1cm4gcmVzdC5maW5kKGNvbmZpZywgYXV0aCwgJ19JbnN0YWxsYXRpb24nLCB3aGVyZSwge1xuICAgICAgICAgIGxpbWl0OiAwLFxuICAgICAgICAgIGNvdW50OiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgIH0pXG4gICAgICAudGhlbigoeyByZXN1bHRzLCBjb3VudCB9KSA9PiB7XG4gICAgICAgIGlmICghcmVzdWx0cyB8fCBjb3VudCA9PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIHB1c2hTdGF0dXMuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgICBwdXNoU3RhdHVzLnNldFJ1bm5pbmcoTWF0aC5jZWlsKGNvdW50IC8gbGltaXQpKTtcbiAgICAgICAgbGV0IHNraXAgPSAwO1xuICAgICAgICB3aGlsZSAoc2tpcCA8IGNvdW50KSB7XG4gICAgICAgICAgY29uc3QgcXVlcnkgPSB7XG4gICAgICAgICAgICB3aGVyZSxcbiAgICAgICAgICAgIGxpbWl0LFxuICAgICAgICAgICAgc2tpcCxcbiAgICAgICAgICAgIG9yZGVyLFxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBjb25zdCBwdXNoV29ya0l0ZW0gPSB7XG4gICAgICAgICAgICBib2R5LFxuICAgICAgICAgICAgcXVlcnksXG4gICAgICAgICAgICBwdXNoU3RhdHVzOiB7IG9iamVjdElkOiBwdXNoU3RhdHVzLm9iamVjdElkIH0sXG4gICAgICAgICAgICBhcHBsaWNhdGlvbklkOiBjb25maWcuYXBwbGljYXRpb25JZCxcbiAgICAgICAgICB9O1xuICAgICAgICAgIHRoaXMucGFyc2VQdWJsaXNoZXIucHVibGlzaCh0aGlzLmNoYW5uZWwsIEpTT04uc3RyaW5naWZ5KHB1c2hXb3JrSXRlbSkpO1xuICAgICAgICAgIHNraXAgKz0gbGltaXQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQStCO0FBRS9CLE1BQU1BLFlBQVksR0FBRyxtQkFBbUI7QUFDeEMsTUFBTUMsa0JBQWtCLEdBQUcsR0FBRztBQUV2QixNQUFNQyxTQUFTLENBQUM7RUFLckI7RUFDQTtFQUNBQyxXQUFXLENBQUNDLE1BQVcsR0FBRyxDQUFDLENBQUMsRUFBRTtJQUM1QixJQUFJLENBQUNDLE9BQU8sR0FBR0QsTUFBTSxDQUFDQyxPQUFPLElBQUlILFNBQVMsQ0FBQ0ksa0JBQWtCLEVBQUU7SUFDL0QsSUFBSSxDQUFDQyxTQUFTLEdBQUdILE1BQU0sQ0FBQ0csU0FBUyxJQUFJTixrQkFBa0I7SUFDdkQsSUFBSSxDQUFDTyxjQUFjLEdBQUdDLG9DQUFpQixDQUFDQyxlQUFlLENBQUNOLE1BQU0sQ0FBQztFQUNqRTtFQUVBLE9BQU9FLGtCQUFrQixHQUFHO0lBQzFCLE9BQVEsR0FBRUssYUFBSyxDQUFDQyxhQUFjLElBQUdaLFlBQWEsRUFBQztFQUNqRDtFQUVBYSxPQUFPLENBQUNDLElBQUksRUFBRUMsS0FBSyxFQUFFWCxNQUFNLEVBQUVZLElBQUksRUFBRUMsVUFBVSxFQUFFO0lBQzdDLE1BQU1DLEtBQUssR0FBRyxJQUFJLENBQUNYLFNBQVM7SUFFNUJRLEtBQUssR0FBRyxJQUFBSSw2QkFBc0IsRUFBQ0osS0FBSyxDQUFDOztJQUVyQztJQUNBLE1BQU1LLEtBQUssR0FBRyxVQUFVO0lBQ3hCLE9BQU9DLE9BQU8sQ0FBQ0MsT0FBTyxFQUFFLENBQ3JCQyxJQUFJLENBQUMsTUFBTTtNQUNWLE9BQU9DLGFBQUksQ0FBQ0MsSUFBSSxDQUFDckIsTUFBTSxFQUFFWSxJQUFJLEVBQUUsZUFBZSxFQUFFRCxLQUFLLEVBQUU7UUFDckRHLEtBQUssRUFBRSxDQUFDO1FBQ1JRLEtBQUssRUFBRTtNQUNULENBQUMsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUNESCxJQUFJLENBQUMsQ0FBQztNQUFFSSxPQUFPO01BQUVEO0lBQU0sQ0FBQyxLQUFLO01BQzVCLElBQUksQ0FBQ0MsT0FBTyxJQUFJRCxLQUFLLElBQUksQ0FBQyxFQUFFO1FBQzFCLE9BQU9ULFVBQVUsQ0FBQ1csUUFBUSxFQUFFO01BQzlCO01BQ0FYLFVBQVUsQ0FBQ1ksVUFBVSxDQUFDQyxJQUFJLENBQUNDLElBQUksQ0FBQ0wsS0FBSyxHQUFHUixLQUFLLENBQUMsQ0FBQztNQUMvQyxJQUFJYyxJQUFJLEdBQUcsQ0FBQztNQUNaLE9BQU9BLElBQUksR0FBR04sS0FBSyxFQUFFO1FBQ25CLE1BQU1PLEtBQUssR0FBRztVQUNabEIsS0FBSztVQUNMRyxLQUFLO1VBQ0xjLElBQUk7VUFDSlo7UUFDRixDQUFDO1FBRUQsTUFBTWMsWUFBWSxHQUFHO1VBQ25CcEIsSUFBSTtVQUNKbUIsS0FBSztVQUNMaEIsVUFBVSxFQUFFO1lBQUVrQixRQUFRLEVBQUVsQixVQUFVLENBQUNrQjtVQUFTLENBQUM7VUFDN0N2QixhQUFhLEVBQUVSLE1BQU0sQ0FBQ1E7UUFDeEIsQ0FBQztRQUNELElBQUksQ0FBQ0osY0FBYyxDQUFDNEIsT0FBTyxDQUFDLElBQUksQ0FBQy9CLE9BQU8sRUFBRWdDLElBQUksQ0FBQ0MsU0FBUyxDQUFDSixZQUFZLENBQUMsQ0FBQztRQUN2RUYsSUFBSSxJQUFJZCxLQUFLO01BQ2Y7SUFDRixDQUFDLENBQUM7RUFDTjtBQUNGO0FBQUMifQ==